import argparse
import numpy
import h5py
import pandas
import json
import re
import scipy.stats as statistics
import sys
import os
import pickle
import json

# Import from my packages
from md_davis import secStr_counts


def parse_potential(potential_file):
    df = pandas.read_csv(potential_file, skiprows=12, delim_whitespace=True, skipfooter=2,
        dtype={'resSeq': int}, engine='python',
        names=['name', 'resName', 'chainID', 'resSeq', 'potential',
            'reaction', 'coulomb', 'Ex', 'Ey', 'Ez'],
    )
    potentials =  df.groupby('resSeq')['potential'].sum()
    return potentials


def main():
    parser = argparse.ArgumentParser(description='Collect residue wise data into pandas dataframes')
    parser.add_argument('-f', '--file', help='HDF5 file containing data')
    parser.add_argument('-p', '--prefix', default='', help='Prefix for the sequence in alignment file')
    parser.add_argument('-d', '--directory', help='Directory containing surface potential files')
    parser.add_argument('-e', '--electrostatics', help='Surface potentials for the PDB structure')
    parser.add_argument('-a', '--annotations', type=argparse.FileType('r'), help='Residues to mark on the plot')
    parser.add_argument('-o', '--output', type=argparse.FileType('wb'), help='Output pickle file')
    args = parser.parse_args()

    output = {'prefix': args.prefix}
    output['data'] = {}
    if args.annotations:
        output['annotations'] = json.load(args.annotations)

    with h5py.File(args.file, 'r') as hdf5_file:
        for ch, chain_sequence in enumerate(hdf5_file.attrs['sequence'].split('/')):
            # Add sequence
            sequence = pandas.DataFrame(data=enumerate(chain_sequence, start=1),
                                        columns=['resi', 'resn'])
            # Add scondary structure to dtaframe from HDF5 file
            ss_counts = hdf5_file[f'secondary_structure/counts_per_residue/chain {ch}']
            secondary_structure_dict = {}
            for code in secStr_counts.SECSTR_CODES.keys():
                secondary_structure_dict[code] = ss_counts[code]
            secondary_structure_df = pandas.DataFrame(secondary_structure_dict)
            # Add RMSF to dtaframe from HDF5 file
            rmsf_df = pandas.DataFrame(hdf5_file[f'rmsf/chain {ch}'][:, 1])
            # Add dihedral standard deviation to dtaframe from HDF5 file
            dih_sd_dict = {}
            for angle in ['phi', 'psi', 'omega']:
                dih_sd_dict[angle] = hdf5_file[f'dihedral_standard_deviation/chain {ch}'][angle]
            dih_sd_df = pandas.DataFrame(dih_sd_dict)
            # Combine all of the above
            output['data'][f'chain {ch}'] = pandas.concat([sequence, secondary_structure_df, rmsf_df, dih_sd_df],
                keys=['sequence', 'secondary_structure', 'rmsf', 'dihedral_standard_deviation'], axis=1)

    # TODO: Multiple Chain surface_potential
    # Add potential
    temp_df = pandas.DataFrame(output['data']['chain 0']['sequence', 'resi'].values,
                                columns=['resi'])
    column = 0
    for file in os.listdir(args.directory):
        if file.endswith('.pot'):
            print('Parsing: ', file)
            pot_file = os.path.join(args.directory, file)
            pot_series = parse_potential(pot_file)
            temp_df[str(column)] = 0
            for idx in pot_series.index:
                temp_df.loc[temp_df.resi == idx, str(column)] = pot_series[idx]
            column += 1
    del temp_df['resi']

    surface_potential_df = pandas.DataFrame()
    surface_potential_df['mean'] = temp_df.mean(axis=1)
    surface_potential_df['std'] = temp_df.std(axis=1)
    surface_potential_df['pdb'] = 0
    # Add PDB potential
    pdb_pot = parse_potential(args.electrostatics)
    for idx in pdb_pot.index:
        surface_potential_df.loc[output['data']['chain 0']['sequence']['resi'] == idx, 'pdb'] = pdb_pot[idx]

    columns=[('surface_potential', 'mean'),
             ('surface_potential', 'std'),
             ('surface_potential', 'pdb')
            ]
    surface_potential_df.columns = pandas.MultiIndex.from_tuples(columns)
    output['data']['chain 0'] = output['data']['chain 0'].join(surface_potential_df)
    pickle.dump(output, args.output)


if __name__ == "__main__":
    main()
