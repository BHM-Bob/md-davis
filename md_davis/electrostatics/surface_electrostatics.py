""" This module finds the electrostatics from a 3D potential map in Gaussian
    (Software) cube format at the points on the surface of protein. The points
    on the surface of the protein are obtained by MSMS program from MGL Tools

    Author: Dibyajyoti Maity
"""

import os
import argparse
import subprocess
# local imports
import get_msms_surface


def dir_path(string):
    if os.path.isdir(string):
        return string
    else:
        raise NotADirectoryError(string)


def run_delphi_on_surface(pdb_file, surface, output_directory, output_filename,
    delphi_path, radius_file, charge_file):
    """ Run Delphi on protein surface created by MSMS program """
    parameters = f"""in(pdb,file="{pdb_file}")
    in(siz,file="{radius_file}")
    in(crg,file="{charge_file}")
    in(frc,file='{surface}')
    acenter(0,0,0)
    gsize=201
    salt=0.10
    exdi=80
    linit=2000
    maxc=0.0000000001
    out(phi, file="{output_directory}/{output_filename}.cub", format="cube")
    out(frc, file="{output_directory}/{output_filename}.pot")
    site(Atom, Potential, Reaction, Coulomb, Field)
    """
    print(parameters, file=open(f'{output_filename}_tmp.prm', 'w'))
    subprocess.run([delphi_path, f'{output_filename}_tmp.prm'])
    subprocess.run(['rm', f'{output_filename}_tmp.prm'])


def main():
    """ Get the potential on the surface points generated by MSMS """
    this_script_path = os.path.dirname(os.path.realpath(__file__))
    """ Get filename and arguments from the commandline """
    parser = argparse.ArgumentParser(description='Parse .xvg files created by Gromacs')
    parser.add_argument('-p', '--pdb', required=True,  metavar='filename.pdb',
                        help='PDB structure file')
    parser.add_argument('-o', '--output', dest='output', type=dir_path, default='./',
                        help='Output filename')
    parser.add_argument('-s', '--surface', metavar='filename.pdb',
                        help='Input file containing vertices generated by MSMS')
    parser.add_argument('-m', '--msms', default='/home/djmaity/.opt/msms', help='MSMS path')
    parser.add_argument('-d', '--delphi', default='/home/djmaity/.opt/delphi8.4.2_sequential',
                        help='full path to Delphi executable')
    parser.add_argument('-r', '--radius', default=f'{this_script_path}/charmm.siz', help='Radius')
    parser.add_argument('-c', '--charge', default=f'{this_script_path}/charmm.crg', help='MSMS path')
    args = parser.parse_args()

    output_filename = os.path.splitext(os.path.basename(args.pdb))[0]

    if args.surface:
        surface_file = args.surface
    else:
        vert_file = get_msms_surface.run_msms(pdb_file=args.pdb,
                                              output_directory=args.output,
                                              msms_path=args.msms)
        surface_file = f'{args.output}/{output_filename}_surf.pdb'
        subprocess.run(['python', f'{this_script_path}/vert2pdb.py', vert_file],
                       stdout=open(surface_file, 'w'))

    run_delphi_on_surface(pdb_file=args.pdb,
                          output_directory=args.output,
                          output_filename=output_filename,
                          surface=surface_file,
                          delphi_path=args.delphi,
                          radius_file=args.radius,
                          charge_file=args.charge,
    )


if __name__ == '__main__':
    main()
